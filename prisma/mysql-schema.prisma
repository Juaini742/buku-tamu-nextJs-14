generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model meetings {
  id           String         @id @unique(map: "Meetings_id_key")
  user_id      String
  subject      String
  description  String
  meeting_date DateTime
  status       String
  photo        String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  profile_id   String
  users        User           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Meetings_user_id_fkey")
  profile      user_profiles  @relation(fields: [profile_id], references: [id], onDelete: Cascade, map: "Meetings_user_profile_id_fkey")
  notification notification[]

  @@index([user_id], map: "Meetings_user_id_fkey")
  @@index([profile_id], map: "Meetings_user_profile_id_fkey")
}

model notification {
  id         String   @id @unique(map: "Notification_id_key")
  user_id    String
  meeting_id String
  type       String
  message    String
  status     String
  sent_at    DateTime @default(now())
  created_at DateTime @default(now())
  meetings   meetings @relation(fields: [meeting_id], references: [id], onDelete: Cascade, map: "Notification_meeting_id_fkey")
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Notification_user_id_fkey")

  @@index([meeting_id], map: "Notification_meeting_id_fkey")
  @@index([user_id], map: "Notification_user_id_fkey")
}

model user_profiles {
  id        String     @id @unique(map: "User_profiles_id_key")
  user_id   String     @unique
  full_name String
  age       Int
  born      DateTime
  phone     BigInt
  ktp       BigInt
  educate   String
  address   String
  gender    String
  meetings  meetings[]
  users     User       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "User_profiles_user_id_fkey")

  @@index([user_id], map: "User_profiles_user_id_fkey")
}

model User {
  id            String         @id @unique(map: "Users_id_key") @default(cuid())
  name          String?
  email         String         @unique(map: "Users_email_key")
  password      String?
  role          users_role     @default(GUEST)
  image         String?
  emailVerified DateTime?
  created_at    DateTime       @default(now())
  Account       Account[]
  meetings      meetings[]
  notification  notification[]
  user_profiles user_profiles?
}

model Account {
  id                String  @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_id_fkey")

  @@id([provider, providerAccountId])
}

enum users_role {
  ADMIN
  GUEST
}
